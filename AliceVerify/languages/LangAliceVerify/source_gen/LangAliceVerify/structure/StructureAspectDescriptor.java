package LangAliceVerify.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptObj = createDescriptorForObj();
  /*package*/ final ConceptDescriptor myConceptObjRef = createDescriptorForObjRef();
  /*package*/ final ConceptDescriptor myConceptObjectRule = createDescriptorForObjectRule();
  /*package*/ final ConceptDescriptor myConceptRegexRule = createDescriptorForRegexRule();
  /*package*/ final ConceptDescriptor myConceptRentSumRule = createDescriptorForRentSumRule();
  /*package*/ final ConceptDescriptor myConceptRule = createDescriptorForRule();
  /*package*/ final ConceptDescriptor myConceptRuleLists = createDescriptorForRuleLists();
  /*package*/ final ConceptDescriptor myConceptValueRule = createDescriptorForValueRule();
  /*package*/ final EnumerationDescriptor myEnumerationMustOrNot = new EnumerationDescriptor_MustOrNot();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.extendedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
    deps.aggregatedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptObj, myConceptObjRef, myConceptObjectRule, myConceptRegexRule, myConceptRentSumRule, myConceptRule, myConceptRuleLists, myConceptValueRule);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Obj:
        return myConceptObj;
      case LanguageConceptSwitch.ObjRef:
        return myConceptObjRef;
      case LanguageConceptSwitch.ObjectRule:
        return myConceptObjectRule;
      case LanguageConceptSwitch.RegexRule:
        return myConceptRegexRule;
      case LanguageConceptSwitch.RentSumRule:
        return myConceptRentSumRule;
      case LanguageConceptSwitch.Rule:
        return myConceptRule;
      case LanguageConceptSwitch.RuleLists:
        return myConceptRuleLists;
      case LanguageConceptSwitch.ValueRule:
        return myConceptValueRule;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationMustOrNot);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForObj() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "Obj", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca4336dfL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367400949471");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObjRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "ObjRef", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3fa11eL);
    b.class_(false, false, false);
    // extends: jetbrains.mps.baseLanguage.structure.Expression
    b.super_(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367400714526");
    b.version(3);
    b.associate("field", 0x5c9a2fcfca4348cfL).target(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca4336dfL).optional(false).origin("6672698367400954063").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObjectRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "ObjectRule", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca4793e7L);
    b.class_(false, false, false);
    // extends: LangAliceVerify.structure.Rule
    b.super_(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3e8f00L);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367401235431");
    b.version(3);
    b.property("have", 0x5c9a2fcfca4799ccL).type(MetaIdFactory.dataTypeId(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca47918cL)).origin("6672698367401236940").done();
    b.property("msg", 0x5c9a2fcfca47a47aL).type(PrimitiveTypeId.STRING).origin("6672698367401239674").done();
    b.aggregate("obj", 0x5c9a2fcfca47a104L).target(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca4336dfL).optional(false).ordered(true).multiple(false).origin("6672698367401238788").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegexRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "RegexRule", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca41e693L);
    b.class_(false, false, false);
    // extends: LangAliceVerify.structure.Rule
    b.super_(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3e8f00L);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367400863379");
    b.version(3);
    b.property("Regex", 0x5c9a2fcfca41ebf6L).type(PrimitiveTypeId.STRING).origin("6672698367400864758").done();
    b.property("msg", 0x5c9a2fcfca46f06fL).type(PrimitiveTypeId.STRING).origin("6672698367401193583").done();
    b.aggregate("obj1", 0x5c9a2fcfca46f2e2L).target(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca4336dfL).optional(false).ordered(true).multiple(false).origin("6672698367401194210").done();
    b.aggregate("obj2", 0x5c9a2fcfca4bf0baL).target(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca4336dfL).optional(false).ordered(true).multiple(false).origin("6672698367401521338").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRentSumRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "RentSumRule", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca47655cL);
    b.class_(false, false, false);
    // extends: LangAliceVerify.structure.Rule
    b.super_(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3e8f00L);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367401223516");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "Rule", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3e8f00L);
    b.class_(false, true, false);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367400644352");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRuleLists() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "RuleLists", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3cee28L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367400537640");
    b.version(3);
    b.aggregate("rules", 0x5c9a2fcfca42f3f0L).target(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3e8f00L).optional(true).ordered(true).multiple(true).origin("6672698367400932336").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValueRule() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("LangAliceVerify", "ValueRule", 0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3e91dbL);
    b.class_(false, false, false);
    // extends: LangAliceVerify.structure.Rule
    b.super_(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca3e8f00L);
    b.origin("r:3dbffb5c-3881-46a3-bc9b-bde4d6da2bdf(LangAliceVerify.structure)/6672698367400645083");
    b.version(3);
    b.property("msg", 0x5c9a2fcfca430b6cL).type(PrimitiveTypeId.STRING).origin("6672698367400938348").done();
    b.aggregate("objs", 0x5c9a2fcfca4621eaL).target(0xb9a2040838d24f4bL, 0xa8f420ff93d9ed3aL, 0x5c9a2fcfca4336dfL).optional(false).ordered(true).multiple(true).origin("6672698367401140714").done();
    b.aggregate("exp", 0x5c9a2fcfca3fc6b8L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("6672698367400724152").done();
    return b.create();
  }
}
