package LangAliceGen.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Accessory;
  private ConceptPresentation props_ApplicanceAndFruniture;
  private ConceptPresentation props_BaseRent;
  private ConceptPresentation props_Deposit;
  private ConceptPresentation props_DepositDueDate;
  private ConceptPresentation props_Email;
  private ConceptPresentation props_Fax;
  private ConceptPresentation props_FixedTerm;
  private ConceptPresentation props_KeyDeposit;
  private ConceptPresentation props_LeaseForm;
  private ConceptPresentation props_Lessee;
  private ConceptPresentation props_Lessor;
  private ConceptPresentation props_OtherFee;
  private ConceptPresentation props_PaymentMethod;
  private ConceptPresentation props_PeriodicTerm;
  private ConceptPresentation props_PetDamageDeposit;
  private ConceptPresentation props_Phone;
  private ConceptPresentation props_Rent;
  private ConceptPresentation props_RentDeposit;
  private ConceptPresentation props_RentalUnit;
  private ConceptPresentation props_RentalUnitType;
  private ConceptPresentation props_SecurityDeposit;
  private ConceptPresentation props_ServiceCovered;
  private ConceptPresentation props_Term;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Accessory:
        if (props_Accessory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Accessory");
          props_Accessory = cpb.create();
        }
        return props_Accessory;
      case LanguageConceptSwitch.ApplicanceAndFruniture:
        if (props_ApplicanceAndFruniture == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ApplicanceAndFruniture");
          props_ApplicanceAndFruniture = cpb.create();
        }
        return props_ApplicanceAndFruniture;
      case LanguageConceptSwitch.BaseRent:
        if (props_BaseRent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BaseRent");
          props_BaseRent = cpb.create();
        }
        return props_BaseRent;
      case LanguageConceptSwitch.Deposit:
        if (props_Deposit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Deposit = cpb.create();
        }
        return props_Deposit;
      case LanguageConceptSwitch.DepositDueDate:
        if (props_DepositDueDate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DepositDueDate");
          props_DepositDueDate = cpb.create();
        }
        return props_DepositDueDate;
      case LanguageConceptSwitch.Email:
        if (props_Email == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Email");
          props_Email = cpb.create();
        }
        return props_Email;
      case LanguageConceptSwitch.Fax:
        if (props_Fax == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Fax");
          props_Fax = cpb.create();
        }
        return props_Fax;
      case LanguageConceptSwitch.FixedTerm:
        if (props_FixedTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("fixedterm");
          props_FixedTerm = cpb.create();
        }
        return props_FixedTerm;
      case LanguageConceptSwitch.KeyDeposit:
        if (props_KeyDeposit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("KeyDeposit");
          props_KeyDeposit = cpb.create();
        }
        return props_KeyDeposit;
      case LanguageConceptSwitch.LeaseForm:
        if (props_LeaseForm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LeaseForm = cpb.create();
        }
        return props_LeaseForm;
      case LanguageConceptSwitch.Lessee:
        if (props_Lessee == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Lessee");
          props_Lessee = cpb.create();
        }
        return props_Lessee;
      case LanguageConceptSwitch.Lessor:
        if (props_Lessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Lessor = cpb.create();
        }
        return props_Lessor;
      case LanguageConceptSwitch.OtherFee:
        if (props_OtherFee == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OtherFee");
          props_OtherFee = cpb.create();
        }
        return props_OtherFee;
      case LanguageConceptSwitch.PaymentMethod:
        if (props_PaymentMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PaymentMethod");
          props_PaymentMethod = cpb.create();
        }
        return props_PaymentMethod;
      case LanguageConceptSwitch.PeriodicTerm:
        if (props_PeriodicTerm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PeriodicTerm");
          props_PeriodicTerm = cpb.create();
        }
        return props_PeriodicTerm;
      case LanguageConceptSwitch.PetDamageDeposit:
        if (props_PetDamageDeposit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PetDamageDeposit");
          props_PetDamageDeposit = cpb.create();
        }
        return props_PetDamageDeposit;
      case LanguageConceptSwitch.Phone:
        if (props_Phone == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Phone");
          props_Phone = cpb.create();
        }
        return props_Phone;
      case LanguageConceptSwitch.Rent:
        if (props_Rent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Rent = cpb.create();
        }
        return props_Rent;
      case LanguageConceptSwitch.RentDeposit:
        if (props_RentDeposit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RentDeposit");
          props_RentDeposit = cpb.create();
        }
        return props_RentDeposit;
      case LanguageConceptSwitch.RentalUnit:
        if (props_RentalUnit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RentalUnit = cpb.create();
        }
        return props_RentalUnit;
      case LanguageConceptSwitch.RentalUnitType:
        if (props_RentalUnitType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RentalUnitType");
          props_RentalUnitType = cpb.create();
        }
        return props_RentalUnitType;
      case LanguageConceptSwitch.SecurityDeposit:
        if (props_SecurityDeposit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SecurityDeposit");
          props_SecurityDeposit = cpb.create();
        }
        return props_SecurityDeposit;
      case LanguageConceptSwitch.ServiceCovered:
        if (props_ServiceCovered == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ServiceCovered");
          props_ServiceCovered = cpb.create();
        }
        return props_ServiceCovered;
      case LanguageConceptSwitch.Term:
        if (props_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Term = cpb.create();
        }
        return props_Term;
    }
    return null;
  }
}
