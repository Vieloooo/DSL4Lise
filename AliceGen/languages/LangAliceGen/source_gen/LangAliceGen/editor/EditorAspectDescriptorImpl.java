package LangAliceGen.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Accessory_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ApplicanceAndFruniture_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BaseRent_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DepositDueDate_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Email_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Fax_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new FixedTerm_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new KeyDeposit_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new LeaseForm_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Lessee_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Lessor_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new OtherFee_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new PaymentMethod_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new PeriodicTerm_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new PetDamageDeposit_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Phone_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Rent_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new RentDeposit_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new RentalUnit_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new RentalUnitType_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new SecurityDeposit_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new ServiceCovered_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c90ad7L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c8d6aeL), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786ca509aL), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786ca9b9eL), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c7dba8L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c87fd1L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c91eb8L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786caa4f9L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c5f230L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c7d526L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c7d3d3L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786ca81c4L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786ca5a5eL), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c9e9e6L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786cab094L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c7dd7dL), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786ca3e0cL), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786caab47L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c8ba0dL), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c8df86L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786cab528L), MetaIdFactory.conceptId(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786ca6a6fL)).seal();
}
