package LangAliceGen.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import LangAliceGen.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Accessory:
        return new Accessory_TextGen();
      case LanguageConceptSwitch.ApplicanceAndFruniture:
        return new ApplicanceAndFruniture_TextGen();
      case LanguageConceptSwitch.BaseRent:
        return new BaseRent_TextGen();
      case LanguageConceptSwitch.DepositDueDate:
        return new DepositDueDate_TextGen();
      case LanguageConceptSwitch.Email:
        return new Email_TextGen();
      case LanguageConceptSwitch.Fax:
        return new Fax_TextGen();
      case LanguageConceptSwitch.FixedTerm:
        return new FixedTerm_TextGen();
      case LanguageConceptSwitch.KeyDeposit:
        return new KeyDeposit_TextGen();
      case LanguageConceptSwitch.LeaseForm:
        return new LeaseForm_TextGen();
      case LanguageConceptSwitch.Lessee:
        return new Lessee_TextGen();
      case LanguageConceptSwitch.Lessor:
        return new Lessor_TextGen();
      case LanguageConceptSwitch.OtherFee:
        return new OtherFee_TextGen();
      case LanguageConceptSwitch.PaymentMethod:
        return new PaymentMethod_TextGen();
      case LanguageConceptSwitch.PeriodicTerm:
        return new PeriodicTerm_TextGen();
      case LanguageConceptSwitch.PetDamageDeposit:
        return new PetDamageDeposit_TextGen();
      case LanguageConceptSwitch.Phone:
        return new Phone_TextGen();
      case LanguageConceptSwitch.Rent:
        return new Rent_TextGen();
      case LanguageConceptSwitch.RentDeposit:
        return new RentDeposit_TextGen();
      case LanguageConceptSwitch.RentalUnit:
        return new RentalUnit_TextGen();
      case LanguageConceptSwitch.RentalUnitType:
        return new RentalUnitType_TextGen();
      case LanguageConceptSwitch.SecurityDeposit:
        return new SecurityDeposit_TextGen();
      case LanguageConceptSwitch.ServiceCovered:
        return new ServiceCovered_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.Lessor$QT)) {
        String fname = getFileName_Lessor(root);
        String ext = getFileExtension_Lessor(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.RentalUnit$_$)) {
        String fname = getFileName_RentalUnit(root);
        String ext = getFileExtension_RentalUnit(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.Rent$5L)) {
        String fname = getFileName_Rent(root);
        String ext = getFileExtension_Rent(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.LeaseForm$hp)) {
        String fname = getFileName_LeaseForm(root);
        String ext = getFileExtension_LeaseForm(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Lessor(SNode node) {
    return node.getName();
  }
  private static String getFileName_RentalUnit(SNode node) {
    return node.getName();
  }
  private static String getFileName_Rent(SNode node) {
    return node.getName();
  }
  private static String getFileName_LeaseForm(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_Lessor(SNode node) {
    return "txt";
  }
  private static String getFileExtension_RentalUnit(SNode node) {
    return "";
  }
  private static String getFileExtension_Rent(SNode node) {
    return "";
  }
  private static String getFileExtension_LeaseForm(SNode node) {
    return "json";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Lessor$QT = MetaAdapterFactory.getConcept(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c7d3d3L, "LangAliceGen.structure.Lessor");
    /*package*/ static final SConcept RentalUnit$_$ = MetaAdapterFactory.getConcept(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c8ba0dL, "LangAliceGen.structure.RentalUnit");
    /*package*/ static final SConcept Rent$5L = MetaAdapterFactory.getConcept(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786ca3e0cL, "LangAliceGen.structure.Rent");
    /*package*/ static final SConcept LeaseForm$hp = MetaAdapterFactory.getConcept(0x533d0166ce6841a9L, 0xb1ee5d3b6bc37f42L, 0x2e6e221786c5f230L, "LangAliceGen.structure.LeaseForm");
  }
}
